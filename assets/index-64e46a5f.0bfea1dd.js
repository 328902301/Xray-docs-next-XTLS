import{b as e,m as t,i as n,G as r,l as i}from"./index.ca177075.js";import{i as a,u as d,s as o,a as s,b as c,p as h,c as l,d as g,e as f,f as u,g as w,h as p}from"./edges-02da71a2.974d6815.js";import{l as v,q as x,c as y,h as m}from"./mermaid.core.33128f0d.js";function b(t){var r,i={options:{directed:t.isDirected(),multigraph:t.isMultigraph(),compound:t.isCompound()},nodes:N(t),edges:E(t)};return n(t.graph())||(i.value=(r=t.graph(),e(r,4))),i}function N(e){return t(e.nodes(),(function(t){var r=e.node(t),i=e.parent(t),a={v:t};return n(r)||(a.value=r),n(i)||(a.parent=i),a}))}function E(e){return t(e.edges(),(function(t){var r=e.edge(t),i={v:t.v,w:t.w};return n(t.name)||(i.name=t.name),n(r)||(i.value=r),i}))}let X={},C={},S={};const D=(e,t)=>(v.trace("In isDecendant",t," ",e," = ",C[t].includes(e)),!!C[t].includes(e)),O=(e,t,n,r)=>{v.warn("Copying children of ",e,"root",r,"data",t.node(e),r);const i=t.children(e)||[];e!==r&&i.push(e),v.warn("Copying (nodes) clusterId",e,"nodes",i),i.forEach((i=>{if(t.children(i).length>0)O(i,t,n,r);else{const a=t.node(i);v.info("cp ",i," to ",r," with parent ",e),n.setNode(i,a),r!==t.parent(i)&&(v.warn("Setting parent",i,t.parent(i)),n.setParent(i,t.parent(i))),e!==r&&i!==e?(v.debug("Setting parent",i,e),n.setParent(i,e)):(v.info("In copy ",e,"root",r,"data",t.node(e),r),v.debug("Not Setting parent for node=",i,"cluster!==rootId",e!==r,"node!==clusterId",i!==e));const d=t.edges(i);v.debug("Copying Edges",d),d.forEach((i=>{v.info("Edge",i);const a=t.edge(i.v,i.w,i.name);v.info("Edge data",a,r);try{((e,t)=>(v.info("Decendants of ",t," is ",C[t]),v.info("Edge is ",e),e.v!==t&&e.w!==t&&(C[t]?C[t].includes(e.v)||D(e.v,t)||D(e.w,t)||C[t].includes(e.w):(v.debug("Tilt, ",t,",not in decendants"),!1))))(i,r)?(v.info("Copying as ",i.v,i.w,a,i.name),n.setEdge(i.v,i.w,a,i.name),v.info("newGraph edges ",n.edges(),n.edge(n.edges()[0]))):v.info("Skipping copy of edge ",i.v,"--\x3e",i.w," rootId: ",r," clusterId:",e)}catch(d){v.error(d)}}))}v.debug("Removing node",i),t.removeNode(i)}))},B=(e,t)=>{const n=t.children(e);let r=[...n];for(const i of n)S[i]=e,r=[...r,...B(i,t)];return r},J=(e,t)=>{v.trace("Searching",e);const n=t.children(e);if(v.trace("Searching children of id ",e,n),n.length<1)return v.trace("This is a valid node",e),e;for(const r of n){const n=J(r,t);if(n)return v.trace("Found replacement for",e," => ",n),n}},T=e=>X[e]&&X[e].externalConnections&&X[e]?X[e].id:e,I=(e,t)=>{if(v.warn("extractor - ",t,b(e),e.children("D")),t>10)return void v.error("Bailing out");let n=e.nodes(),i=!1;for(const r of n){const t=e.children(r);i=i||t.length>0}if(i){v.debug("Nodes = ",n,t);for(const i of n)if(v.debug("Extracting node",i,X,X[i]&&!X[i].externalConnections,!e.parent(i),e.node(i),e.children("D")," Depth ",t),X[i])if(!X[i].externalConnections&&e.children(i)&&e.children(i).length>0){v.warn("Cluster without external connections, without a parent and with children",i,t);let n="TB"===e.graph().rankdir?"LR":"TB";X[i]&&X[i].clusterData&&X[i].clusterData.dir&&(n=X[i].clusterData.dir,v.warn("Fixing dir",X[i].clusterData.dir,n));const a=new r({multigraph:!0,compound:!0}).setGraph({rankdir:n,nodesep:50,ranksep:50,marginx:8,marginy:8}).setDefaultEdgeLabel((function(){return{}}));v.warn("Old graph before copy",b(e)),O(i,e,a,i),e.setNode(i,{clusterNode:!0,id:i,clusterData:X[i].clusterData,labelText:X[i].labelText,graph:a}),v.warn("New graph after copy node: (",i,")",b(a)),v.debug("Old graph after copy",b(e))}else v.warn("Cluster ** ",i," **not meeting the criteria !externalConnections:",!X[i].externalConnections," no parent: ",!e.parent(i)," children ",e.children(i)&&e.children(i).length>0,e.children("D"),t),v.debug(X);else v.debug("Not a cluster",i,t);n=e.nodes(),v.warn("New list of nodes",n);for(const r of n){const n=e.node(r);v.warn(" Now next level",r,n),n.clusterNode&&I(n.graph,t+1)}}else v.debug("Done, no node has children",e.nodes())},R=(e,t)=>{if(0===t.length)return[];let n=Object.assign(t);return t.forEach((t=>{const r=e.children(t),i=R(e,r);n=[...n,...i]})),n},G={rect:(e,t)=>{v.trace("Creating subgraph rect for ",t.id,t);const n=e.insert("g").attr("class","cluster"+(t.class?" "+t.class:"")).attr("id",t.id),r=n.insert("rect",":first-child"),i=n.insert("g").attr("class","cluster-label"),a=i.node().appendChild(w(t.labelText,t.labelStyle,void 0,!0));let d=a.getBBox();if(x(y().flowchart.htmlLabels)){const e=a.children[0],t=m(a);d=e.getBoundingClientRect(),t.attr("width",d.width),t.attr("height",d.height)}const o=0*t.padding,s=o/2,c=t.width<=d.width+o?d.width+o:t.width;t.width<=d.width+o?t.diff=(d.width-t.width)/2-t.padding/2:t.diff=-t.padding/2,v.trace("Data ",t,JSON.stringify(t)),r.attr("style",t.style).attr("rx",t.rx).attr("ry",t.ry).attr("x",t.x-c/2).attr("y",t.y-t.height/2-s).attr("width",c).attr("height",t.height+o),i.attr("transform","translate("+(t.x-d.width/2)+", "+(t.y-t.height/2)+")");const h=r.node().getBBox();return t.width=h.width,t.height=h.height,t.intersect=function(e){return p(t,e)},n},roundedWithTitle:(e,t)=>{const n=e.insert("g").attr("class",t.classes).attr("id",t.id),r=n.insert("rect",":first-child"),i=n.insert("g").attr("class","cluster-label"),a=n.append("rect"),d=i.node().appendChild(w(t.labelText,t.labelStyle,void 0,!0));let o=d.getBBox();if(x(y().flowchart.htmlLabels)){const e=d.children[0],t=m(d);o=e.getBoundingClientRect(),t.attr("width",o.width),t.attr("height",o.height)}o=d.getBBox();const s=0*t.padding,c=s/2,h=t.width<=o.width+t.padding?o.width+t.padding:t.width;t.width<=o.width+t.padding?t.diff=(o.width+0*t.padding-t.width)/2:t.diff=-t.padding/2,r.attr("class","outer").attr("x",t.x-h/2-c).attr("y",t.y-t.height/2-c).attr("width",h+s).attr("height",t.height+s),a.attr("class","inner").attr("x",t.x-h/2-c).attr("y",t.y-t.height/2-c+o.height-1).attr("width",h+s).attr("height",t.height+s-o.height-3),i.attr("transform","translate("+(t.x-o.width/2)+", "+(t.y-t.height/2-t.padding/3+(x(y().flowchart.htmlLabels)?5:3))+")");const l=r.node().getBBox();return t.height=l.height,t.intersect=function(e){return p(t,e)},n},noteGroup:(e,t)=>{const n=e.insert("g").attr("class","note-cluster").attr("id",t.id),r=n.insert("rect",":first-child"),i=0*t.padding,a=i/2;r.attr("rx",t.rx).attr("ry",t.ry).attr("x",t.x-t.width/2-a).attr("y",t.y-t.height/2-a).attr("width",t.width+i).attr("height",t.height+i).attr("fill","none");const d=r.node().getBBox();return t.width=d.width,t.height=d.height,t.intersect=function(e){return p(t,e)},n},divider:(e,t)=>{const n=e.insert("g").attr("class",t.classes).attr("id",t.id),r=n.insert("rect",":first-child"),i=0*t.padding,a=i/2;r.attr("class","divider").attr("x",t.x-t.width/2-a).attr("y",t.y-t.height/2).attr("width",t.width+i).attr("height",t.height+i);const d=r.node().getBBox();return t.width=d.width,t.height=d.height,t.diff=-t.padding/2,t.intersect=function(e){return p(t,e)},n}};let F={};const L=(e,t,n,r)=>{v.info("Graph in recursive render: XXX",b(t),r);const a=t.graph().rankdir;v.trace("Dir in recursive render - dir:",a);const f=e.insert("g").attr("class","root");t.nodes()?v.info("Recursive render XXX",t.nodes()):v.info("No nodes found for",t),t.edges().length>0&&v.trace("Recursive edges",t.edge(t.edges()[0]));const u=f.insert("g").attr("class","clusters"),w=f.insert("g").attr("class","edgePaths"),p=f.insert("g").attr("class","edgeLabels"),x=f.insert("g").attr("class","nodes");t.nodes().forEach((function(e){const i=t.node(e);if(void 0!==r){const n=JSON.parse(JSON.stringify(r.clusterData));v.info("Setting data for cluster XXX (",e,") ",n,r),t.setNode(r.id,n),t.parent(e)||(v.trace("Setting parent",e,r.id),t.setParent(e,r.id,n))}if(v.info("(Insert) Node XXX"+e+": "+JSON.stringify(t.node(e))),i&&i.clusterNode){v.info("Cluster identified",e,i.width,t.node(e));const r=L(x,i.graph,n,t.node(e)),a=r.elem;d(i,a),i.diff=r.diff||0,v.info("Node bounds (abc123)",e,i,i.width,i.x,i.y),o(a,i),v.warn("Recursive render complete ",a,i)}else t.children(e).length>0?(v.info("Cluster - the non recursive path XXX",e,i.id,i,t),v.info(J(i.id,t)),X[i.id]={id:J(i.id,t),node:i}):(v.info("Node - the non recursive path",e,i.id,i),s(x,t.node(e),a))})),t.edges().forEach((function(e){const n=t.edge(e.v,e.w,e.name);v.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(e)),v.info("Edge "+e.v+" -> "+e.w+": ",e," ",JSON.stringify(t.edge(e))),v.info("Fix",X,"ids:",e.v,e.w,"Translateing: ",X[e.v],X[e.w]),c(p,n)})),t.edges().forEach((function(e){v.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(e))})),v.info("#############################################"),v.info("###                Layout                 ###"),v.info("#############################################"),v.info(t),i(t),v.info("Graph after layout:",b(t));let y=0;return(e=>R(e,e.children()))(t).forEach((function(e){const n=t.node(e);v.info("Position "+e+": "+JSON.stringify(t.node(e))),v.info("Position "+e+": ("+n.x,","+n.y,") width: ",n.width," height: ",n.height),n&&n.clusterNode?h(n):t.children(e).length>0?(((e,t)=>{v.trace("Inserting cluster");const n=t.shape||"rect";F[t.id]=G[n](e,t)})(u,n),X[n.id].node=n):h(n)})),t.edges().forEach((function(e){const r=t.edge(e);v.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(r),r);const i=l(w,e,r,X,n,t);g(r,i)})),t.nodes().forEach((function(e){const n=t.node(e);v.info(e,n.type,n.diff),"group"===n.type&&(y=n.diff)})),{elem:f,diff:y}},k=(e,t,n,r,i)=>{a(e,n,r,i),f(),u(),F={},C={},S={},X={},v.warn("Graph at first:",b(t)),((e,t)=>{!e||t>10?v.debug("Opting out, no graph "):(v.debug("Opting in, graph "),e.nodes().forEach((function(t){e.children(t).length>0&&(v.warn("Cluster identified",t," Replacement id in edges: ",J(t,e)),C[t]=B(t,e),X[t]={id:J(t,e),clusterData:e.node(t)})})),e.nodes().forEach((function(t){const n=e.children(t),r=e.edges();n.length>0?(v.debug("Cluster identified",t,C),r.forEach((e=>{e.v!==t&&e.w!==t&&D(e.v,t)^D(e.w,t)&&(v.warn("Edge: ",e," leaves cluster ",t),v.warn("Decendants of XXX ",t,": ",C[t]),X[t].externalConnections=!0)}))):v.debug("Not a cluster ",t,C)})),e.edges().forEach((function(t){const n=e.edge(t);v.warn("Edge "+t.v+" -> "+t.w+": "+JSON.stringify(t)),v.warn("Edge "+t.v+" -> "+t.w+": "+JSON.stringify(e.edge(t)));let r=t.v,i=t.w;if(v.warn("Fix XXX",X,"ids:",t.v,t.w,"Translating: ",X[t.v]," --- ",X[t.w]),X[t.v]&&X[t.w]&&X[t.v]===X[t.w]){v.warn("Fixing and trixing link to self - removing XXX",t.v,t.w,t.name),v.warn("Fixing and trixing - removing XXX",t.v,t.w,t.name),r=T(t.v),i=T(t.w),e.removeEdge(t.v,t.w,t.name);const a=t.w+"---"+t.v;e.setNode(a,{domId:a,id:a,labelStyle:"",labelText:n.label,padding:0,shape:"labelRect",style:""});const d=JSON.parse(JSON.stringify(n)),o=JSON.parse(JSON.stringify(n));d.label="",d.arrowTypeEnd="none",o.label="",d.fromCluster=t.v,o.toCluster=t.v,e.setEdge(r,a,d,t.name+"-cyclic-special"),e.setEdge(a,i,o,t.name+"-cyclic-special")}else(X[t.v]||X[t.w])&&(v.warn("Fixing and trixing - removing XXX",t.v,t.w,t.name),r=T(t.v),i=T(t.w),e.removeEdge(t.v,t.w,t.name),r!==t.v&&(n.fromCluster=t.v),i!==t.w&&(n.toCluster=t.w),v.warn("Fix Replacing with XXX",r,i,t.name),e.setEdge(r,i,n,t.name))})),v.warn("Adjusted Graph",b(e)),I(e,0),v.trace(X))})(t),v.warn("Graph after:",b(t)),L(e,t,r)};export{k as r};
