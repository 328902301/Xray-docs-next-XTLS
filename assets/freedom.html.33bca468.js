import{r as n,o as s,c as o,a as e,b as a,w as t,F as l,d as p,e as u}from"./app.48111a85.js";const c={},r=p('<h1 id="freedom" tabindex="-1"><a class="header-anchor" href="#freedom" aria-hidden="true">#</a> Freedom</h1><p>Freedom 是一个出站协议，可以用来向任意网络发送（正常的） TCP 或 UDP 数据。</p><h2 id="outboundconfigurationobject" tabindex="-1"><a class="header-anchor" href="#outboundconfigurationobject" aria-hidden="true">#</a> OutboundConfigurationObject</h2><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;domainStrategy&quot;</span><span class="token operator">:</span> <span class="token string">&quot;AsIs&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;redirect&quot;</span><span class="token operator">:</span> <span class="token string">&quot;127.0.0.1:3366&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;userLevel&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;fragment&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;packets&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tlshello&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;length&quot;</span><span class="token operator">:</span> <span class="token string">&quot;100-200&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;interval&quot;</span><span class="token operator">:</span> <span class="token string">&quot;10-20&quot;</span> <span class="token comment">// ms</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><blockquote><p><code>domainStrategy</code>: &quot;AsIs&quot; | &quot;UseIP&quot; | &quot;UseIPv4&quot; | &quot;UseIPv6&quot;</p></blockquote><p>在目标地址为域名时, 配置相应的值, Freedom 的行为模式如下:</p>',6),d=e("li",null,[e("code",null,'"AsIs"'),u(": Freedom 通过系统 DNS 服务器解析获取 IP, 向此域名发出连接.")],-1),i=e("code",null,'"UseIP"',-1),q=u("、"),b=e("code",null,'"UseIPv4"',-1),m=u(" 和 "),k=e("code",null,'"UseIPv6"',-1),h=u(": Xray 使用 "),g=u("内置 DNS 服务器"),v=u(" 解析获取 IP, 向此域名发出连接. 默认值为 "),I=e("code",null,'"AsIs"',-1),P=u("。"),f={class:"custom-container tip"},y=e("p",{class:"custom-container-title"},"TIP 1",-1),j=u("当使用 "),F=e("code",null,'"UseIP"',-1),U=u(" 模式，并且 "),T=u("出站连接配置"),S=u(" 中指定了 "),x=e("code",null,"sendThrough",-1),L=u(" 时，Freedom 会根据 "),_=e("code",null,"sendThrough",-1),A=u(" 的值自动判断所需的 IP 类型，IPv4 或 IPv6。"),C=p('<div class="custom-container tip"><p class="custom-container-title">TIP 2</p><p>当使用 <code>&quot;UseIPv4&quot;</code> 或 <code>&quot;UseIPv6&quot;</code> 模式时，Freedom 会只使用对应的 IPv4 或 IPv6 地址。当 <code>sendThrough</code> 指定了不匹配的本地地址时，将导致连接失败。</p></div><blockquote><p><code>redirect</code>: address_port</p></blockquote><p>Freedom 会强制将所有数据发送到指定地址（而不是 inbound 指定的地址）。</p><p>其值为一个字符串，样例：<code>&quot;127.0.0.1:80&quot;</code>，<code>&quot;:1234&quot;</code>。</p><p>当地址不指定时，如 <code>&quot;:443&quot;</code>，Freedom 不会修改原先的目标地址。 当端口为 <code>0</code> 时，如 <code>&quot;xray.com: 0&quot;</code>，Freedom 不会修改原先的端口。</p><blockquote><p><code>userLevel</code>: number</p></blockquote>',6),D=u("用户等级，连接会使用这个用户等级对应的 "),N=u("本地策略"),O=u("。"),w=u("userLevel 的值, 对应 "),R=u("policy"),X=u(" 中 "),z=e("code",null,"level",-1),B=u(" 的值。 如不指定, 默认为 0。"),E=e("blockquote",null,[e("p",null,[e("code",null,"fragment"),u(": map")])],-1),G=e("p",null,"一些键值对配置项，用于控制发出的 TCP 分片，在某些情况下可以欺骗审查系统，比如绕过 SNI 黑名单。",-1),H=e("p",null,[e("code",null,'"packets"'),u('：支持两种分片方式 "1-3" 是 TCP 的流切片，应用于客户端第 1 至第 3 次写数据。"tlshello" 是 TLS 握手包切片。')],-1),J=e("p",null,[e("code",null,'"length"'),u("：分片包长 (byte)")],-1),K=e("p",null,[e("code",null,'"interval"'),u("：分片间隔（ms）")],-1);c.render=function(p,u){const c=n("RouterLink");return s(),o(l,null,[r,e("ul",null,[d,e("li",null,[i,q,b,m,k,h,a(c,{to:"/config/dns.html"},{default:t((()=>[g])),_:1}),v,I,P])]),e("div",f,[y,e("p",null,[j,F,U,a(c,{to:"/config/outbound.html#outboundobject"},{default:t((()=>[T])),_:1}),S,x,L,_,A])]),C,e("p",null,[D,a(c,{to:"/config/policy.html#levelpolicyobject"},{default:t((()=>[N])),_:1}),O]),e("p",null,[w,a(c,{to:"/config/policy.html#policyobject"},{default:t((()=>[R])),_:1}),X,z,B]),E,G,H,J,K],64)};export default c;
